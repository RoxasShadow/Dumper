#! /usr/bin/env ruby
#--
# Copyright(C) 2013 Giovanni Capuano <webmaster@giovannicapuano.net>
#
# This file is part of Dumper.
#
# Dumper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Dumper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Dumper.  If not, see <http://www.gnu.org/licenses/>.
#++
require 'dumper'
require 'optparse'

options = {}

OptionParser.new do |o|
  options[:url ] = []
  options[:path] = []

  o.on '-l', '--list',            'Show available profiles' do
    abort 'Profiles available:'.tap { |s|
      Dumper.list.sort { |a, b| a <=> b }.each { |p| s << "\n" + (' ' * 3) + p }
    } if ARGV.empty?
  end

  o.on '-i', '--info PROFILE',    'Get info about profiles' do |profile|
    if Dumper.list.include? profile
      method = ("info_#{profile}").to_sym
      Dumper::Profiles.send(method).tap { |i|
        puts "Option 'from' is #{i[:from] ? 'available' : 'not available'}."
        puts "Option 'to'   is #{i[:to]   ? 'available' : 'not available'}."
        abort "It dumps #{i[:type]}."
      }
    else
      abort 'Profile not found.'
    end
  end

  o.on '-u', '--url URL',         'Target URL'    do |url|
    options[:url]    << url
  end

  o.on '-f', '--from PAGE',       'Start to save from... (if allowed)' do |pages|
    options[:from]    = pages.to_i
  end

  o.on '-t', '--to PAGE',         'Finish to save at... (if allowed)'  do |pages|
    options[:to]      = pages.to_i
  end

  o.on '-p', '--path PATH',       'Target folder'      do |path|
    options[:path]   << File.expand_path(path)
  end

  o.on '-x', '--xpath XPATH',     'Use a custom xpath' do |xpath|
    options[:xpath]   = xpath
  end

  o.on '-r', '--profile PROFILE', 'Force the use of the given profile' do |profile|
    options[:profile] = profile
  end

  o.on '-t', '--threads MIN:MAX',  'Set the number of threads to use'   do |threads|
    threads = threads.split ?:
    Dumper.pool_size = threads[0].to_i, threads[1].to_i
  end

  o.on '-m', '--silence',          'Print only important messages'    do
    Dumper.shut_up!
  end

  o.on '-o', '--output ',          'Print the logs on the given file' do |file|
    Dumper::Logger.redirect_on :file, file
  end

  o.on '-s', '--file FILE',       'File containing in each line "URL||Folder"' do |file|
    file = File.open(file).read.gsub(/\r\n?/, "\n")
    file.each_line { |line|
      split              = line.split '||'
      options[:url]     << split[0].strip
      options[:path]    << split[1].strip
    }
  end
end.parse!

if options[:url].empty?
  abort 'An URL or a list of URLs is required.'
elsif options[:path].empty?
  abort 'Path is required.'
end

options[:url].each_with_index { |url, i|
  begin
    Dir.mkdir(options[:path][i]) unless File.directory? options[:path][i]

    host = options[:profile] || URI.parse(url).host.split(?.)[-2]

    if Dumper.list.include?(host.gsub(?-, ?_))
      if options[:xpath].nil?
        method = "get_#{host.gsub ?-, ?_}".to_sym

        case
          when options[:from] && options[:to] then Dumper::Profiles.send method, url, options[:path][i], options[:from], options[:to]
          when options[:from]                 then Dumper::Profiles.send method, url, options[:path][i], options[:from]
          else                                     Dumper::Profiles.send method, url, options[:path][i]
        end
      else
        Dumper.get_generic  url, options[:path][i], options[:xpath]
      end
    else
      puts 'Cannot find any profile for your source.'
      puts 'Consider using `--profile` or `--xpath`.'
    end
  rescue Nokogiri::XML::XPath::SyntaxError => e
    puts e.to_s.gsub /expression/, 'xpath'
    puts 'Cannot dump.'
  rescue OpenURI::HTTPError   => e
    puts "Error opening #{url}: #{e}"
  rescue URI::InvalidURIError => e
    puts "URL #{url} is not valid: #{e}"
  end
}
